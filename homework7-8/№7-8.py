# 1. Вводится натуральное число n.
# Для этого числа вычислите n-ое число Фибоначчи и выведите сумму этого числа и его факториала.
# Вычисление числа Фибоначчи и факториала вынесите в отдельные функции factorial(n) и fib(n).
# Считайте первое число Фибоначчи равным единице.

# fib1 = fib2 = 1
# n = input("Номер элемента ряда Фибоначчи: ")
# n = int(n) - 2
# while n > 0:
#     fib1, fib2 = fib2, fib1 + fib2
#     n -= 1
# print("Значение этого элемента:", fib2)

# n = int(input())
#
# def factorial(n):
#     summa = 1
#     for i in range(1,n+1):
#         summa *= i
#     print(summa)
#
# factorial(n)

# 2.	Напишите реализацию функции closest_mod_5,
# принимающую в качестве единственного аргумента целое число x и возвращающую самое маленькое целое число y,
# такое что: -y больше или равно x -y делится нацело на 5:
# x 6 -> 10, x 15 -> 15

# def closest_mod_5(x):
#     if x % 5 == 0:
#         y = closest_mod_5(int(x/5))
#         return y
#     return x
# n = int(input("Введите число:"))
# print(closest_mod_5(n)*5)

# def closest_mod_5(x): # второй способ
#     if x % 5 == 0:
#         return x
#     else:
#         while True:
#             x += 1
#             if x % 5 == 0:
#                 return x
# print(closest_mod_5(20))

# def closest_mod_5(x): # третий способ
#     if x % 5 == 0:
#         return x
#     else:
#         for i in range(x, x + 5):
#             if i % 5 == 0:
#                 return i
#
#
# print(closest_mod_5(21))


# 3. В языке Python есть некоторые ограничения на имена переменных. Имена переменных
# -могут состоять только из цифр, букв и знаков подчеркивания.
# -не могут начинаться с цифры.
# Программист вводит строки с именами переменных.
# Для каждой переменной нужно вывести "Можно использовать",
# если ее имя корректно, или "Нельзя использовать", если это не так.
# Определив все нужные переменные, программист заканчивает ввод строкой "Поработали, и хватит".
# Для проверки каждой строки используйте функцию check_variable(v).
# Для простоты будем считать, что программист использует только латинские буквы.

# def check_variable(v):
#     if v[0].isdigit():
#         return False
#     return ''.join(filter(lambda x: x.isalnum() or x == '_', v)) == v
# a = input()
# while a != 'Поработали, и хватит':
#     print('Можно использовать' if check_variable(a) else 'Нельзя использовать')
#     a = input()

# 4. Пользователь делает вклад в размере a рублей сроком на years лет под 10% годовых
# (каждый год размер его вклада увеличивается на 10%.
# Эти деньги прибавляются к сумме вклада, и на них в следующем году тоже будут проценты).
# Написать функцию bank, принимающая аргументы a и years,
# и возвращающую сумму, которая будет на счету пользователя.

# def bank():
#     m = int(input('Введите сумму:'))
#     y = int(input('Введите насколько лет: '))
#     for i in range(y):
#         m += int(m * 0.1)
#     return m
# print(bank())

# 5. Дана функция, которая выводит все простые числа в промежутке от 1 до 100.
# Написать декоратор который будет проверять время работы этой функции.
# Задекорировать функцию. Вывести время работы этой функции, а так же сами простые числа.

# def time():
#     # x = int(input("Время работы функции:"))
#     y = int(input("Простые числа:"))
#     prime = True
#     y = 2
#     for y in range(1,101):
#         if y % y == 0:
#             prime = False
#             break
#         y += 1
#
#         if prime:
#             print("Простое число")
#         else:
#             print("Составное число")

# 6. Дана функция которая запрашивает у пользователя определённые данные для регистрации на портале и запоминает их.
# Напишите декоратор, который будет засекать время проведённое пользователем на портале при регистрации.











